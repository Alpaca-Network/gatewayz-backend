[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gatewayz-backend"
version = "2.0.3"
description = "Gatewayz Universal Inference API"
requires-python = ">=3.12"
dependencies = [
    # Core web framework
    "fastapi==0.104.1",
    "uvicorn==0.24.0",
    "httpx==0.27.0",
    "pydantic[email]==2.12.2",
    "python-multipart==0.0.6",
    "anyio>=3.7.1,<4.0.0",

    # Database and storage
    "supabase==2.12.0",
    "redis==5.0.1",

    # Authentication and security
    "python-dotenv==1.0.0",
    "cryptography==41.0.7",
    "email-validator==2.1.0",

    # External services
    "requests==2.31.0",
    "openai==1.44.0",
    "resend==0.8.0",
    "stripe==13.0.1",
    "portkey-ai>=2.0.0",

    # Provider SDKs (lightweight)
    "cerebras-cloud-sdk>=1.0.0",
    "xai-sdk>=0.1.0",

    # Analytics (lightweight)
    "statsig-python-core==0.10.2",
    "posthog==6.7.8",
]

[project.optional-dependencies]
# Heavy observability dependencies - install only when needed
observability = [
    "braintrust",
    "opentelemetry-api>=1.28.0",
    "opentelemetry-sdk>=1.28.0",
    "opentelemetry-instrumentation>=0.49b0",
    "opentelemetry-instrumentation-fastapi>=0.49b0",
    "opentelemetry-instrumentation-httpx>=0.49b0",
    "opentelemetry-instrumentation-requests>=0.49b0",
    "opentelemetry-exporter-otlp>=1.28.0",
]

# Heavy Google Cloud dependencies - install only when needed
google = [
    "google-cloud-aiplatform>=1.38.0",
    "google-auth>=2.0.0",
]

# Test dependencies
test = [
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.21.1",
    "pytest-xdist>=3.5.0",
    "pytest-split>=0.9.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
    "flask-sqlalchemy",
]

# Full production dependencies (for Railway, etc.)
full = [
    "gatewayz-backend[observability,google]",
]

# Ruff Configuration (Fast Python Linter)
[tool.ruff]
# Python version
target-version = "py312"

# Line length
line-length = 100

# Directories to include/exclude
src = ["src"]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    "node_modules",
    "build",
    "dist",
]

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (Black handles this)
    "B008",  # Do not perform function calls in argument defaults
    "W191",  # Indentation contains tabs
    "I001",  # Import block is unsorted (isort handles this separately)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
# Ignore import errors in __init__.py files
"__init__.py" = ["F401", "F403"]
# Ignore unused imports in test files
"tests/**/*.py" = ["F401", "F811"]

# Black Configuration (Code Formatter)
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort Configuration (Import Sorter)
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/migrations/*", "**/__pycache__/*"]

# MyPy Configuration (Type Checker)
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when ready for strict typing
ignore_missing_imports = true
files = "src/**/*.py"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --strict-markers --tb=short --color=yes"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may require database/API)",
    "slow: Slow running tests",
    "critical: Critical functionality tests that must always pass",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
