-- Create credit_transactions table
CREATE TABLE IF NOT EXISTS credit_transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    amount NUMERIC(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    description TEXT,
    payment_id INTEGER,
    metadata JSONB DEFAULT '{}'::jsonb,
    balance_before NUMERIC(10, 2) NOT NULL,
    balance_after NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    created_by VARCHAR(100),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_payment FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE SET NULL
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_credit_transactions_user_id ON credit_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_credit_transactions_created_at ON credit_transactions(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_credit_transactions_type ON credit_transactions(transaction_type);

-- Enable Row Level Security
ALTER TABLE credit_transactions ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS users_can_view_own_transactions ON credit_transactions;
DROP POLICY IF EXISTS service_role_all ON credit_transactions;

-- Create policy to allow authenticated users to see their own transactions
CREATE POLICY users_can_view_own_transactions ON credit_transactions
    FOR SELECT
    TO authenticated
    USING (user_id = (current_setting('request.jwt.claims', true)::json->>'user_id')::integer);

-- Create policy to allow service role to do everything
CREATE POLICY service_role_all ON credit_transactions
    FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (true);

-- Create policy to allow anon role to insert (needed for API)
CREATE POLICY anon_can_insert ON credit_transactions
    FOR INSERT
    TO anon
    WITH CHECK (true);
