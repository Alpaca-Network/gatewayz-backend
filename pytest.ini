[pytest]
# Pytest configuration for Gatewayz backend tests

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Directory to look for tests
testpaths = tests

# Minimum version
minversion = 7.0

# Add src to Python path
pythonpath = .

# Asyncio configuration for async tests
asyncio_mode = auto

# Show summary of all test outcomes
addopts =
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    -p no:warnings
    --color=yes
    --maxfail=3
    --ff
    --timeout=60
    -n auto

# Custom markers for test organization
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (may require database/API)
    slow: Slow running tests
    critical: Critical functionality tests that must always pass
    regression: Regression tests to ensure endpoints don't break
    auth: Authentication related tests
    payment: Payment and billing tests
    chat: Chat completion tests
    admin: Admin endpoint tests
    smoke: Post-deployment smoke tests for validation
    contract: Contract tests that verify external API structure
    e2e: End-to-end tests that test complete user flows
    health: Gateway health check tests

# Coverage options
[coverage:run]
source = src
omit =
    */tests/*
    */test_*.py
    */__pycache__/*

[coverage:report]
# Phase 3 Coverage Targets:
# Current: 25% (baseline from 23.4%)
# Month 2: 35%
# Month 3: 50%
# Month 4: 70%
# Month 5: 90% (target)
fail_under = 25
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    except ImportError:
    except ModuleNotFoundError:

[coverage:html]
directory = htmlcov
