name: SonarQube Security Scan

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  sonarqube-scan:
    name: SonarQube Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov pytest-asyncio

      - name: Generate coverage report
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=html \
            -v --tb=short 2>&1 | head -200 || true

      - name: Fix coverage file paths
        run: |
          # Ensure coverage.xml exists, even if tests fail
          if [ ! -f coverage.xml ]; then
            echo "<?xml version=\"1.0\" ?>" > coverage.xml
            echo "<coverage version=\"5.5\" timestamp=\"$(date +%s)000\" lines-valid=\"0\" lines-covered=\"0\" line-rate=\"0\" branches-covered=\"0\" branches-valid=\"0\" branch-rate=\"0\" complexity=\"0\">" >> coverage.xml
            echo "</coverage>" >> coverage.xml
          fi

      - name: SonarQube Scan (Community Edition - File Analysis)
        run: |
          python -m pip install bandit safety

          # Run Bandit security scanner
          bandit -r src/ -f json -o bandit-report.json 2>&1 || true

          # Run Safety vulnerability check
          safety check --json 2>&1 | tee safety-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            coverage.xml
            htmlcov/

      - name: Check for critical security issues
        run: |
          # Check Bandit output for critical issues
          if [ -f bandit-report.json ]; then
            # Parse and fail on HIGH or CRITICAL severity
            CRITICAL=$(python3 -c "
            import json
            with open('bandit-report.json') as f:
              data = json.load(f)
            critical = [r for r in data.get('results', []) if r.get('severity') in ['HIGH', 'CRITICAL']]
            print(len(critical))
            " 2>/dev/null || echo "0")

            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL critical security issues in code"
              exit 1
            fi
          fi

      - name: Comment on PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let report = '## 🔐 Security Scan Results\n\n';

            try {
              const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const results = bandit.results || [];
              const critical = results.filter(r => r.severity === 'HIGH' || r.severity === 'CRITICAL');
              const high = results.filter(r => r.severity === 'MEDIUM');
              const medium = results.filter(r => r.severity === 'LOW');

              report += `### Bandit Results\n`;
              report += `- 🔴 Critical/High: ${critical.length}\n`;
              report += `- 🟡 Medium: ${high.length}\n`;
              report += `- 🟢 Low: ${medium.length}\n\n`;

              if (critical.length > 0) {
                report += `**Critical Issues Found:**\n`;
                critical.slice(0, 5).forEach(issue => {
                  report += `- ${issue.issue_severity}: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
                if (critical.length > 5) {
                  report += `- ... and ${critical.length - 5} more\n`;
                }
              }
            } catch (e) {
              report += 'Could not parse Bandit results\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Summary
        if: always()
        run: |
          echo "## Security Scan Summary"
          echo ""
          echo "✅ Code security analysis completed"
          echo "📊 Reports available in artifacts"
          echo ""
          echo "### Files Scanned:"
          find src -name "*.py" -type f | wc -l | xargs echo "- Python files:"
          echo ""
          echo "### Security Tools Used:"
          echo "- Bandit (code security scanning)"
          echo "- Safety (dependency vulnerability checking)"
