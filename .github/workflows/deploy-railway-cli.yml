name: Deploy to Railway (CLI-based)

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest

    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      should_deploy: ${{ steps.determine-env.outputs.should_deploy }}
      app_name: ${{ steps.determine-env.outputs.app_name }}

    steps:
      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            ENV="staging"
          else
            ENV="skip"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT

          if [ "$ENV" != "skip" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "app_name=gatewayz-$ENV" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

          echo "üìç Environment: $ENV"
          echo "üöÄ Should Deploy: $([ "$ENV" != "skip" ] && echo "true" || echo "false")"

  # Checkout and setup
  checkout-and-setup:
    name: Checkout & Setup
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'

    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Generate cache key
        id: cache-key
        run: |
          KEY="deps-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}"
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "Cache key: $KEY"

  # Install dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: checkout-and-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          echo "‚úÖ Dependencies installed"

      - name: Verify imports
        run: |
          echo "üîç Verifying imports..."
          python -c "import sys; sys.path.insert(0, '.'); from src.main import app; print('‚úÖ FastAPI app imports successfully')"

  # Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          pytest tests/ -v --tb=short -m "not smoke" 2>&1 | tee test-results.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All tests passed"
          else
            echo "‚ö†Ô∏è Tests completed with exit code: $TEST_EXIT_CODE"
          fi

          exit $TEST_EXIT_CODE

      - name: Generate coverage report
        if: always()
        run: |
          echo "üìä Generating coverage report..."
          pytest tests/ --cov=src --cov-report=term-summary --cov-report=xml -m "not smoke" || true
          echo "‚úÖ Coverage report generated"

      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Verify deployment files
        run: |
          echo "üìã Verifying deployment configuration..."

          files=("railway.json" "railway.toml" "requirements.txt" "start.sh" "src/main.py")

          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
            echo "‚úÖ $file exists"
          done

          echo "‚úÖ All deployment files verified"

      - name: Validate Python syntax
        run: |
          echo "üîç Validating Python syntax..."
          python -m py_compile src/main.py
          python -m py_compile src/config/__init__.py || true
          echo "‚úÖ Python syntax valid"

      - name: Check Railway configuration
        run: |
          echo "üîß Checking Railway configuration..."

          # Verify railway.json structure
          python3 << 'EOF'
          import json
          try:
            with open('railway.json', 'r') as f:
              config = json.load(f)
              print("‚úÖ railway.json is valid JSON")
              if 'builder' in config:
                print(f"   Builder: {config['builder']}")
          except Exception as e:
            print(f"‚ùå Error reading railway.json: {e}")
            exit(1)
          EOF

  # Deploy to Railway using CLI
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Railway CLI
        run: |
          echo "üöÇ Installing Railway CLI..."
          npm install -g @railway/cli
          railway --version
          echo "‚úÖ Railway CLI installed"

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "‚ùå RAILWAY_TOKEN secret not configured"
            echo "Please add RAILWAY_TOKEN to GitHub repository secrets"
            exit 1
          fi

          ENV="${{ needs.setup.outputs.environment }}"
          APP_NAME="${{ needs.setup.outputs.app_name }}"

          echo "üöÄ Starting deployment to $ENV environment..."
          echo "üì¶ App: $APP_NAME"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üå≥ Branch: ${{ github.ref_name }}"
          echo ""

          # Link to Railway service
          railway link --environmentName="$ENV"

          # Deploy the application
          echo "‚è≥ Deploying application..."
          railway up \
            --service=gatewayz \
            --detach \
            --skip-database=true

          echo "‚úÖ Deployment initiated"
          echo "üìä Monitor at: https://railway.app"

  # Post-deployment health check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always() && needs.setup.outputs.should_deploy == 'true'

    steps:
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for Railway deployment to complete..."
          sleep 90  # Wait 1.5 minutes for Railway to process

      - name: Run health check
        run: |
          ENV="${{ needs.setup.outputs.environment }}"

          # Get health check URL from secrets
          if [ "$ENV" == "production" ]; then
            HEALTH_URL="${{ secrets.PRODUCTION_URL }}"
          else
            HEALTH_URL="${{ secrets.STAGING_URL }}"
          fi

          if [ -z "$HEALTH_URL" ]; then
            echo "‚ö†Ô∏è Health check URL not configured"
            echo "Add PRODUCTION_URL and/or STAGING_URL to GitHub secrets"
            exit 0
          fi

          HEALTH_ENDPOINT="$HEALTH_URL/health"
          echo "üè• Checking health at: $HEALTH_ENDPOINT"

          MAX_RETRIES=6
          RETRY_DELAY=30
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_RETRIES ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "üìç Health check attempt $ATTEMPT/$MAX_RETRIES..."

            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_ENDPOINT" || echo "000")

            if [ "$HTTP_CODE" == "200" ]; then
              echo "‚úÖ Health check passed! (HTTP $HTTP_CODE)"
              echo "üéâ Deployment successful!"
              exit 0
            else
              echo "‚ö†Ô∏è Got HTTP $HTTP_CODE"

              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "‚è≥ Retrying in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
              fi
            fi
          done

          echo "‚ùå Health check failed after $MAX_RETRIES attempts"
          echo "‚ö†Ô∏è Deployment may have issues. Check Railway dashboard."
          exit 1

  # Deployment summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [setup, health-check]
    if: always() && needs.setup.outputs.should_deploy == 'true'

    steps:
      - name: Generate summary
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          DEPLOY_STATUS="${{ needs.health-check.result }}"

          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üìä DEPLOYMENT SUMMARY"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "Environment:  $ENV"
          echo "Branch:       ${{ github.ref_name }}"
          echo "Commit:       ${{ github.sha }}"
          echo "Author:       ${{ github.actor }}"
          echo "Status:       $DEPLOY_STATUS"
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

          if [ "$DEPLOY_STATUS" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo ""
            echo "üìç Next steps:"
            echo "  ‚Ä¢ Monitor logs: https://railway.app"
            echo "  ‚Ä¢ Test endpoints at: https://railway.app"
          else
            echo "‚ùå Deployment encountered issues"
            echo ""
            echo "üîç Troubleshooting:"
            echo "  ‚Ä¢ Check Railway dashboard: https://railway.app"
            echo "  ‚Ä¢ Review deployment logs"
            echo "  ‚Ä¢ Verify secrets are configured"
          fi
